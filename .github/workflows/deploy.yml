name: Deploy to EC2

on:
  push:
    branches: [ main ]
  workflow_dispatch:

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v4

    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: Build frontend
      working-directory: ./frontend
      run: |
        npm ci
        npm run build

    - name: Deploy to EC2
      env:
        PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        HOSTNAME: ${{ secrets.EC2_HOSTNAME }}
        USER_NAME: ${{ secrets.EC2_USER_NAME }}
        DJANGO_SECRET_KEY: ${{ secrets.DJANGO_SECRET_KEY }}
        OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      run: |
        echo "$PRIVATE_KEY" > private_key
        chmod 600 private_key
        
        # Stop services and clean up
        ssh -o StrictHostKeyChecking=no -i private_key ${USER_NAME}@${HOSTNAME} 'sudo systemctl stop lifeline-backend || true; sudo systemctl stop nginx || true; sudo rm -rf /home/ec2-user/lifeline; mkdir -p /home/ec2-user/lifeline'
        
        # Copy files
        scp -i private_key -r frontend/build ${USER_NAME}@${HOSTNAME}:/home/ec2-user/lifeline/frontend
        scp -i private_key -r backend ${USER_NAME}@${HOSTNAME}:/home/ec2-user/lifeline/backend
        
        # Install and configure
        ssh -i private_key ${USER_NAME}@${HOSTNAME} 'cd /home/ec2-user/lifeline && python3 -m venv venv && source venv/bin/activate && pip install -r backend/requirements.txt && pip install gunicorn'
        
        # Django setup
        ssh -i private_key ${USER_NAME}@${HOSTNAME} 'cd /home/ec2-user/lifeline/backend/LifeLine && source /home/ec2-user/lifeline/venv/bin/activate && DJANGO_SECRET_KEY='"'"'${{ secrets.DJANGO_SECRET_KEY }}'"'"' OPENAI_API_KEY='"'"'${{ secrets.OPENAI_API_KEY }}'"'"' python manage.py migrate && DJANGO_SECRET_KEY='"'"'${{ secrets.DJANGO_SECRET_KEY }}'"'"' OPENAI_API_KEY='"'"'${{ secrets.OPENAI_API_KEY }}'"'"' python manage.py collectstatic --noinput'
        
        # Create environment file for systemd
        ssh -i private_key ${USER_NAME}@${HOSTNAME} 'echo "DJANGO_SECRET_KEY=${{ secrets.DJANGO_SECRET_KEY }}" | sudo tee /etc/lifeline.env && echo "OPENAI_API_KEY=${{ secrets.OPENAI_API_KEY }}" | sudo tee -a /etc/lifeline.env && sudo chmod 644 /etc/lifeline.env'
        
        # Create systemd service
        ssh -i private_key ${USER_NAME}@${HOSTNAME} 'echo "[Unit]
        Description=LifeLine Django Backend
        After=network.target
        
        [Service]
        Type=simple
        User=ec2-user
        WorkingDirectory=/home/ec2-user/lifeline/backend/LifeLine
        EnvironmentFile=/etc/lifeline.env
        ExecStart=/home/ec2-user/lifeline/venv/bin/gunicorn LifeLine.wsgi:application --bind 0.0.0.0:8000
        Restart=always
        
        [Install]
        WantedBy=multi-user.target" | sudo tee /etc/systemd/system/lifeline-backend.service'
        
        # Create nginx config with proper SSL setup
        ssh -i private_key ${USER_NAME}@${HOSTNAME} 'sudo yum install -y openssl && sudo openssl req -x509 -nodes -days 365 -newkey rsa:2048 -keyout /etc/ssl/private/ssl-cert-snakeoil.key -out /etc/ssl/certs/ssl-cert-snakeoil.pem -subj "/C=US/ST=State/L=City/O=Organization/CN=localhost" || true'
        
        ssh -i private_key ${USER_NAME}@${HOSTNAME} 'echo "server {
            listen 80;
            listen 443 ssl;
            server_name _;
            
            ssl_certificate /etc/ssl/certs/ssl-cert-snakeoil.pem;
            ssl_certificate_key /etc/ssl/private/ssl-cert-snakeoil.key;
            
            root /home/ec2-user/lifeline/frontend;
            index index.html;
            
            location / {
                try_files \$uri \$uri/ /index.html;
            }
            
            location /api {
                proxy_pass http://127.0.0.1:8000;
                proxy_set_header Host \$host;
                proxy_set_header X-Real-IP \$remote_addr;
                proxy_set_header X-Forwarded-Proto \$scheme;
                proxy_set_header X-Forwarded-For \$proxy_add_x_forwarded_for;
            }
        }" | sudo tee /etc/nginx/conf.d/lifeline.conf'
        
        # Remove default nginx config that might conflict
        ssh -i private_key ${USER_NAME}@${HOSTNAME} 'sudo rm -f /etc/nginx/conf.d/default.conf /etc/nginx/sites-enabled/default'
        
        # Test nginx config before starting
        ssh -i private_key ${USER_NAME}@${HOSTNAME} 'sudo nginx -t'
        
        # Start services
        ssh -i private_key ${USER_NAME}@${HOSTNAME} 'sudo systemctl daemon-reload && sudo systemctl enable lifeline-backend && sudo systemctl start lifeline-backend && sudo systemctl enable nginx && sudo systemctl start nginx'
        
        # Check if services are running and debug issues
        ssh -i private_key ${USER_NAME}@${HOSTNAME} 'echo "=== Service Status ===" && sudo systemctl is-active lifeline-backend && sudo systemctl is-active nginx && echo "=== Port Check ===" && sudo netstat -tulpn | grep -E ":(80|8000)" && echo "=== Test Django directly ===" && curl -I http://localhost:8000 && echo "=== Test nginx ===" && curl -I http://localhost:80 && echo "=== Nginx error log ===" && sudo tail -n 20 /var/log/nginx/error.log && echo "=== Django logs ===" && sudo journalctl -u lifeline-backend --no-pager --lines=10'
